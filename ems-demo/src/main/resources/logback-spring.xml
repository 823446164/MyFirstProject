<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 
    scan:
    当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。（这个功能可以在不重启运行环境下，调整打印日志的细节，方便定位问题）
    scanPeriod:
    设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:
    当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
    -->
    <springProperty scope="context" name="logPath" source="logging.path"/>
    <springProperty scope="context" name="springAppName" source="spring.application.name"/>
    
    <!-- 根据spring.profiles.active环境变量,测试环境和生产环境输出日志到文件 -->
    <springProfile name="prod,mysql,oracle,db2,cfs_test,poc,icr,icrtest,pmt">
        <!-- DEBUG级别以上日志以JSON存放到文件内-->
        <appender name="debug"
            class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${logPath}/${springAppName}_debug.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!--日志文件输出的文件名 -->
                <fileNamePattern>${logPath}/${springAppName}_debug_%d{yyyy-MM-dd}_%i.log</fileNamePattern>
                <!--日志文件保留天数 -->
                <MaxHistory>30</MaxHistory>
                <!--应用启动时清理超期的日志文件与MaxHistory配合使用 -->
                <cleanHistoryOnStart>true</cleanHistoryOnStart>
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <maxFileSize>100MB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
            </rollingPolicy>
            <!-- 输出DEBUG以上级别的日志 -->
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>debug</level>
            </filter>
            <!-- 日志输出到文件格式 -->
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ${springAppName} [%thread][user:%X{user}][%-5level] %logger{36}-%msg  [Trace:%X{X-B3-TraceId:-}][Span:%X{X-B3-SpanId:-}][Parent:%X{X-B3-ParentSpanId:-}]%n</pattern>
                <charset>UTF-8</charset> <!-- 此处设置字符集 -->
            </encoder>

            <!-- 日志输出到ELK json编码 -->
            <!-- 
            <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                <providers>
                    <timestamp>
                        <timeZone>UTC</timeZone>
                    </timestamp>
                    <pattern>
                        <pattern>
                            {
                                "severity":"%level",
                                "service":"${springAppName}",
                                "user":"%X{user}",
                                "level": "%level",
                                "trace": "%X{X-B3-TraceId:-}",
                                "span": "%X{X-B3-SpanId:-}",
                                "parent": "%X{X-B3-ParentSpanId:-}",
                                "thread": "%thread",
                                "class": "%logger{40}",
                                "message": "%message",
                                  "exception":"%exception{40}"
                            }
                        </pattern>
                    </pattern>
                </providers>
            </encoder>
             -->
        </appender>
        
        <!-- WARN级别以上日志以JSON存放到文件内-->
        <appender name="warn"
            class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${logPath}/${springAppName}_warn.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!--日志文件输出的文件名 -->
                <fileNamePattern>${logPath}/${springAppName}_warn_%d{yyyy-MM-dd}_%i.log</fileNamePattern>
                <!--日志文件保留天数 -->
                <MaxHistory>30</MaxHistory>
                <!--应用启动时清理超期的日志文件与MaxHistory配合使用 -->
                <cleanHistoryOnStart>true</cleanHistoryOnStart>
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <maxFileSize>100MB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
            </rollingPolicy>
            <!-- 输出WARN以上级别的日志 -->
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>warn</level>
            </filter>
            <!-- 日志输出到文件格式 -->
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ${springAppName} [%thread][user:%X{user}][%-5level] %logger{36}-%msg  [Trace:%X{X-B3-TraceId:-}][Span:%X{X-B3-SpanId:-}][Parent:%X{X-B3-ParentSpanId:-}]%n</pattern>
                <charset>UTF-8</charset> <!-- 此处设置字符集 -->
            </encoder>

            <!-- 日志输出到ELK json编码 -->
            <!-- 
            <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                <providers>
                    <timestamp>
                        <timeZone>UTC</timeZone>
                    </timestamp>
                    <pattern>
                        <pattern>
                            {
                                "severity":"%level",
                                "service":"${springAppName}",
                                "user":"%X{user}",
                                "level": "%level",
                                "trace": "%X{X-B3-TraceId:-}",
                                "span": "%X{X-B3-SpanId:-}",
                                "parent": "%X{X-B3-ParentSpanId:-}",
                                "thread": "%thread",
                                "class": "%logger{40}",
                                "message": "%message",
                                  "exception":"%exception{40}"
                            }
                        </pattern>
                    </pattern>
                </providers>
            </encoder>
             -->
        </appender>
        
        <!-- ERROR级别日志以JSON存放到文件内-->
        <appender name="error"
            class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${logPath}/${springAppName}_error.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!--日志文件输出的文件名 -->
                <fileNamePattern>${logPath}/${springAppName}_error_%d{yyyy-MM-dd}_%i.log</fileNamePattern>
                <!--日志文件保留天数 -->
                <MaxHistory>30</MaxHistory>
                <!--应用启动时清理超期的日志文件与MaxHistory配合使用 -->
                <cleanHistoryOnStart>true</cleanHistoryOnStart>
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <maxFileSize>100MB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
            </rollingPolicy>
            <!-- 输出ERROR以上级别的日志 -->
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>error</level>
            </filter>
            <!-- 日志输出到文件格式 -->
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ${springAppName} [%thread][user:%X{user}][%-5level] %logger{36}-%msg  [Trace:%X{X-B3-TraceId:-}][Span:%X{X-B3-SpanId:-}][Parent:%X{X-B3-ParentSpanId:-}]%n</pattern>
                <charset>UTF-8</charset> <!-- 此处设置字符集 -->
            </encoder>

            <!-- 日志输出到ELK json编码 -->
            <!-- 
            <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                <providers>
                    <timestamp>
                        <timeZone>UTC</timeZone>
                    </timestamp>
                    <pattern>
                        <pattern>
                            {
                                "severity":"%level",
                                "service":"${springAppName}",
                                "user":"%X{user}",
                                "level": "%level",
                                "trace": "%X{X-B3-TraceId:-}",
                                "span": "%X{X-B3-SpanId:-}",
                                "parent": "%X{X-B3-ParentSpanId:-}",
                                "thread": "%thread",
                                "class": "%logger{40}",
                                "message": "%message",
                                  "exception":"%exception{40}"
                            }
                        </pattern>
                    </pattern>
                </providers>
            </encoder>
             -->
        </appender>
        
        <!-- 根据spring.profiles.active环境变量,测试环境输出debug级别日志 -->
        <springProfile name="mysql,oracle,oracle,db2,poc,icr,cfs_test,icrtest">
            <!-- root：也是<loger>元素，但是它是根loger。只有一个level属性，应为已经被命名为"root".
            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
            不能设置为INHERITED或者同义词NULL。默认是DEBUG。 -->
            <root level="debug">
                <appender-ref ref="debug"/>
                <appender-ref ref="warn"/>
                <appender-ref ref="error"/>
            </root>
        </springProfile>
    
        <!-- 根据spring.profiles.active环境变量,生产环境输出info级别日志 -->
        <springProfile name="prod,pmt">
                <!-- root：也是<loger>元素，但是它是根loger。只有一个level属性，应为已经被命名为"root".
                level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
                不能设置为INHERITED或者同义词NULL。默认是DEBUG。 -->
            <root level="info">
                <appender-ref ref="debug"/>
                <appender-ref ref="warn"/>
                <appender-ref ref="error"/>
            </root>
        </springProfile>
    </springProfile>
    
    <!-- 根据spring.profiles.active环境变量,开发环境输出日志到控制台 -->
    <springProfile name="dev,pmt">
        <!-- 控制台标准日志输出 -->
        <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
            
            <!-- 控制台输出的日志 的格式 -->
            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ${springAppName} [%thread][user:%X{user}][%-5level] %logger{36}-%msg  [Trace:%X{X-B3-TraceId:-}][Span:%X{X-B3-SpanId:-}][Parent:%X{X-B3-ParentSpanId:-}]%n</pattern>
                <charset>UTF-8</charset> <!-- 此处设置字符集 -->
            </encoder>
            
            <!-- 只是INFO级别以上的日志才显示 -->
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>trace</level>
            </filter>
        </appender>
        
        <!-- root：也是<loger>元素，但是它是根loger。只有一个level属性，应为已经被命名为"root".
            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
            不能设置为INHERITED或者同义词NULL。默认是DEBUG。 -->
        <root level="debug">
            <appender-ref ref="console"/>
        </root>
    </springProfile>
    

</configuration>